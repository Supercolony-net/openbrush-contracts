"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[55361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,f=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:5,title:"PSP22 FlashMint"},s=void 0,i={unversionedId:"smart-contracts/PSP22/Extensions/flashmint",id:"version-1.1.0/smart-contracts/PSP22/Extensions/flashmint",title:"PSP22 FlashMint",description:"This example shows how you can reuse the implementation of PSP22 token with PSP22FlashMint extension, which allows the user to perform a flash loan on the token by minting the borrowed amount and then burning it along with fees for the loan.",source:"@site/versioned_docs/version-1.1.0/smart-contracts/PSP22/Extensions/flashmint.md",sourceDirName:"smart-contracts/PSP22/Extensions",slug:"/smart-contracts/PSP22/Extensions/flashmint",permalink:"/1.1.0/smart-contracts/PSP22/Extensions/flashmint",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/versioned_docs/version-1.1.0/smart-contracts/PSP22/Extensions/flashmint.md",tags:[],version:"1.1.0",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"PSP22 FlashMint"},sidebar:"tutorialSidebar",previous:{title:"PSP22 Wrapper",permalink:"/1.1.0/smart-contracts/PSP22/Extensions/wrapper"},next:{title:"PSP22 Pausable",permalink:"/1.1.0/smart-contracts/PSP22/Extensions/pausable"}},l={},c=[{value:"1. Implement the FlashMint extension",id:"1-implement-the-flashmint-extension",level:2},{value:"2. Implement the FlashLender",id:"2-implement-the-flashlender",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp22"},"PSP22")," token with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp22/src/extensions/flashmint.rs"},"PSP22FlashMint")," extension, which allows the user to perform a flash loan on the token by minting the borrowed amount and then burning it along with fees for the loan."),(0,a.kt)("h2",{id:"1-implement-the-flashmint-extension"},"1. Implement the FlashMint extension"),(0,a.kt)("p",null,"For your smart contract to use this extension, you need to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint")," trait in your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," smart contract. Import everything from ",(0,a.kt)("inlineCode",{parentName:"p"},"psp22::extensions::flashmint::*")," and inherit the implementation for ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint")," trait. You can also customize (override) the original functions from ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use ink_prelude::vec::Vec;\nuse psp22::{\n    extensions::flashmint::*,\n    traits::*,\n};\n\nimpl PSP22FlashMint for MyPSP22FlashMint {}\n")),(0,a.kt)("h2",{id:"2-implement-the-flashlender"},"2. Implement the FlashLender"),(0,a.kt)("p",null,"You will also need to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"FlashLender")," trait, where you will call the functions from ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl FlashLender for MyPSP22FlashMint {\n    #[ink(message)]\n    fn max_flashloan(&mut self, token: AccountId) -> Balance {\n        self._max_flashloan(token)\n    }\n\n    #[ink(message)]\n    fn flash_fee(&mut self, token: AccountId, amount: Balance) -> Result<Balance, FlashLenderError> {\n        match self._flash_fee(token, amount) {\n            Ok(result) => Ok(result),\n            Err(e) => Err(e.into()),\n        }\n    }\n\n    #[ink(message)]\n    fn flashloan(\n        &mut self,\n        receiver_account: AccountId,\n        token: AccountId,\n        amount: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), FlashLenderError> {\n        self._flashloan(receiver_account, token, amount, data)?;\n        Ok(())\n    }\n}\n")),(0,a.kt)("p",null,"And that's it! Your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," is now extended by the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint")," extension and ready to use its functions!"),(0,a.kt)("p",null,"You can check the full example of the implementation of this extension ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/examples/psp22_extensions/flashmint"},"here"),"."),(0,a.kt)("p",null,"You can also check the documentation for the basic implementation of ",(0,a.kt)("a",{parentName:"p",href:"/1.1.0/smart-contracts/PSP22/"},"PSP22"),"."))}m.isMDXComponent=!0}}]);