"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[50454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return n?r.createElement(k,a(a({ref:t},p),{},{components:n})):r.createElement(k,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const l={},a=void 0,i={unversionedId:"examples/timelock-controller",id:"version-1.0.0/examples/timelock-controller",title:"timelock-controller",description:"Overview",source:"@site/versioned_docs/version-1.0.0/examples/timelock-controller.md",sourceDirName:"examples",slug:"/examples/timelock-controller",permalink:"/1.0.0/examples/timelock-controller",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/versioned_docs/version-1.0.0/examples/timelock-controller.md",tags:[],version:"1.0.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"reentrancy-guard",permalink:"/1.0.0/examples/reentrancy-guard"},next:{title:"links",permalink:"/1.0.0/links"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Steps",id:"steps",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"This example shows how you can reuse the implementation of\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/governance/timelock-controller"},"timelock-controller"),"."),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Include dependencies to ",(0,o.kt)("inlineCode",{parentName:"li"},"timelock-controller")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"brush")," in the cargo file.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markdown"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\ntimelock-controller = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n   "ink_primitives/std",\n   "ink_metadata",\n   "ink_metadata/std",\n   "ink_env/std",\n   "ink_storage/std",\n   "ink_lang/std",\n   "scale/std",\n   "scale-info",\n   "scale-info/std",\n\n   # These dependencies   \n   "timelock-controller/std",\n   "brush/std",\n]\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Replace ",(0,o.kt)("inlineCode",{parentName:"li"},"ink::contract")," macro by ",(0,o.kt)("inlineCode",{parentName:"li"},"brush::contract"),".\nImport ",(0,o.kt)("strong",{parentName:"li"},"everything")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"timelock_controller::traits"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod my_timelock_controller {\n   use timelock_controller::traits::*;\n   use ink_prelude::vec::Vec;\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"TimelockController")," is an extension for ",(0,o.kt)("inlineCode",{parentName:"li"},"AccessControl"),", so you need to impl stuff related to both modules.\nDeclare storage struct and declare the fields related to ",(0,o.kt)("inlineCode",{parentName:"li"},"TimelockControllerStorage")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"AccessControlStorage"),".\nThen you need to derive ",(0,o.kt)("inlineCode",{parentName:"li"},"TimelockControllerStorage")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"AccessControlStorage")," traits and mark corresponding fields\nwith ",(0,o.kt)("inlineCode",{parentName:"li"},"#[TimelockControllerStorageField]")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"#[AccessControlStorageField]")," attributes.\nDeriving these traits allows you to reuse the default implementation of ",(0,o.kt)("inlineCode",{parentName:"li"},"TimelockController"),"(and ",(0,o.kt)("inlineCode",{parentName:"li"},"AccessControl"),").")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, AccessControlStorage, TimelockControllerStorage)]\npub struct TimelockStruct {\n   #[AccessControlStorageField]\n   access: AccessControlData,\n   #[TimelockControllerStorageField]\n   timelock: TimelockControllerData,\n}\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Inherit implementations of ",(0,o.kt)("inlineCode",{parentName:"li"},"TimelockController")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"AccessControl")," traits. You can customize (override) methods in this ",(0,o.kt)("inlineCode",{parentName:"li"},"impl")," block.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// `TimelockController` is an extension for `AccessControl`, so you need to impl stuff related to both modules.\nimpl AccessControl for TimelockStruct {}\nimpl TimelockController for TimelockStruct {}\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Define constructor. Your basic version of ",(0,o.kt)("inlineCode",{parentName:"li"},"TimelockController")," contract is ready!")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl TimelockStruct {\n   #[ink(constructor)]\n   pub fn new(min_delay: Timestamp, proposers: Vec<AccountId>, executors: Vec<AccountId>) -> Self {\n      let mut instance = Self::default();\n      let caller = instance.env().caller();\n      // `TimelockController` and `AccessControl` have `_init_with_admin` methods.\n      // You need to call it for each trait separately, to initialize everything for these traits.\n      AccessControl::_init_with_admin(&mut instance, caller);\n      TimelockController::_init_with_admin(&mut instance, caller, min_delay, proposers, executors);\n      instance\n   }\n}\n")))}u.isMDXComponent=!0}}]);