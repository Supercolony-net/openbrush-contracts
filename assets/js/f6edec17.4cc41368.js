"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[40776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:1,title:"PSP22"},i=void 0,s={unversionedId:"smart-contracts/PSP22/psp22",id:"version-1.1.0/smart-contracts/PSP22/psp22",title:"PSP22",description:"This example shows how you can reuse the implementation of PSP22 token. Also, this example shows how you can customize the logic, for example, to reject transferring tokens to hated_account.",source:"@site/versioned_docs/version-1.1.0/smart-contracts/PSP22/psp22.md",sourceDirName:"smart-contracts/PSP22",slug:"/smart-contracts/PSP22/",permalink:"/1.1.0/smart-contracts/PSP22/",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/versioned_docs/version-1.1.0/smart-contracts/PSP22/psp22.md",tags:[],version:"1.1.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"PSP22"},sidebar:"tutorialSidebar",previous:{title:"Timelock Controller",permalink:"/1.1.0/smart-contracts/timelock-controller"},next:{title:"PSP22 Metadata",permalink:"/1.1.0/smart-contracts/PSP22/Extensions/metadata"}},l={},c=[{value:"Step 1: Include dependencies",id:"step-1-include-dependencies",level:2},{value:"Step 2: Add imports",id:"step-2-add-imports",level:2},{value:"Step 3: Define storage",id:"step-3-define-storage",level:2},{value:"Step 4: Inherit logic",id:"step-4-inherit-logic",level:2},{value:"Step 5: Define constructor",id:"step-5-define-constructor",level:2},{value:"Step 6: Customize your contract",id:"step-6-customize-your-contract",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp22"},"PSP22")," token. Also, this example shows how you can customize the logic, for example, to reject transferring tokens to ",(0,r.kt)("inlineCode",{parentName:"p"},"hated_account"),"."),(0,r.kt)("h2",{id:"step-1-include-dependencies"},"Step 1: Include dependencies"),(0,r.kt)("p",null,"Include dependencies to ",(0,r.kt)("inlineCode",{parentName:"p"},"psp22")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"brush")," in the cargo file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc6", git = "https://github.com/paritytech/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2", default-features = false, features = ["derive"] }\nscale-info = { version = "1", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\npsp22 = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n   "ink_primitives/std",\n   "ink_metadata",\n   "ink_metadata/std",\n   "ink_env/std",\n   "ink_storage/std",\n   "ink_lang/std",\n   "scale/std",\n   "scale-info",\n   "scale-info/std",\n\n   # These dependencies   \n   "psp22/std",\n   "brush/std",\n]\n')),(0,r.kt)("h2",{id:"step-2-add-imports"},"Step 2: Add imports"),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"ink::contract")," macro by ",(0,r.kt)("inlineCode",{parentName:"p"},"brush::contract"),".\nImport ",(0,r.kt)("strong",{parentName:"p"},"everything")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"psp22::traits"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod my_psp22 {\n   use psp22::traits::*;\n   use ink_storage::Lazy;\n   use ink_prelude::{string::String, vec::Vec};\n")),(0,r.kt)("h2",{id:"step-3-define-storage"},"Step 3: Define storage"),(0,r.kt)("p",null,"Declare the storage struct and declare the field related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22Storage")," trait. Then you need to derive the ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22Storage")," trait and mark the corresponding field with the ",(0,r.kt)("inlineCode",{parentName:"p"},"#[PSP22StorageField]")," attribute. Deriving this trait allows you to reuse the default implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, PSP22Storage)]\npub struct MyPSP22 {\n    #[PSP22StorageField]\n    psp22: PSP22Data,\n}\n")),(0,r.kt)("h2",{id:"step-4-inherit-logic"},"Step 4: Inherit logic"),(0,r.kt)("p",null,"Inherit the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22")," trait. You can customize (override) methods in the ",(0,r.kt)("inlineCode",{parentName:"p"},"impl")," block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl PSP22 for MyPSP22 {}\n")),(0,r.kt)("h2",{id:"step-5-define-constructor"},"Step 5: Define constructor"),(0,r.kt)("p",null,"Define constructor. Your basic version of ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22")," contract is ready!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl MyPSP22 {\n   #[ink(constructor)]\n   pub fn new(total_supply: Balance) -> Self {\n      let mut instance = Self::default();\n      instance._mint(instance.env().caller(), total_supply);\n      instance\n   }\n}\n")),(0,r.kt)("h2",{id:"step-6-customize-your-contract"},"Step 6: Customize your contract"),(0,r.kt)("p",null,"Customize it by adding hated account logic. It will contain two public methods ",(0,r.kt)("inlineCode",{parentName:"p"},"set_hated_account")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"get_hated_account"),". Also we will\noverride ",(0,r.kt)("inlineCode",{parentName:"p"},"_before_token_transfer")," method in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22")," implementation, and we will add the ",(0,r.kt)("inlineCode",{parentName:"p"},"hated_account: AccountId")," field to the structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[ink(storage)]\n#[derive(Default, PSP22Storage)]\npub struct MyPSP22 {\n   #[PSP22StorageField]\n   psp22: PSP22Data,\n   // fields for hater logic\n   hated_account: AccountId,\n}\n\nimpl PSP22 for MyPSP22 {\n   // Let\'s override method to reject transactions to bad account\n   fn _before_token_transfer(&mut self, _from: AccountId, _to: AccountId, _amount: Balance) {\n      assert!(_to != self.hated_account, "{}", PSP22Error::Custom(String::from("I hate this account!")).as_ref());\n   }\n}\n\nimpl MyPSP22 {\n   #[ink(constructor)]\n   pub fn new(total_supply: Balance) -> Self {\n      let mut instance = Self::default();\n      instance._mint(instance.env().caller(), total_supply);\n      instance\n   }\n\n   #[ink(message)]\n   pub fn set_hated_account(&mut self, hated: AccountId) {\n      self.hated_account = hated;\n   }\n\n   #[ink(message)]\n   pub fn get_hated_account(&self) -> AccountId {\n      self.hated_account.clone()\n   }\n}\n')),(0,r.kt)("p",null,"Also you can use extensions for PSP22 token:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Extensions/metadata"},"PSP22Metadata"),": metadata for PSP22."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Extensions/mintable"},"PSP22Mintable"),": creation of new tokens."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Extensions/burnable"},"PSP22Burnable"),": destruction of own tokens."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Extensions/wrapper"},"PSP22Wrapper"),": token wrapper for PSP22."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Extensions/flashmint"},"PSP22FlashMint"),": extension which allows the user to perform flashloans on the token by minting and burning the token."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Extensions/capped"},"PSP22Capped"),": extension which adds a cap for total supply of PSP22 tokens."),(0,r.kt)("p",null,"Check out the utilities for PSP22 token:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Utils/token-timelock"},"PSP22TokenTimelock"),": utility for locking PSP22 tokens for a specified time."))}d.isMDXComponent=!0}}]);