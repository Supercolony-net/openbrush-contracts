"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[52790],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},38570:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i=void 0,l={unversionedId:"examples/ownable",id:"version-1.0.0/examples/ownable",title:"ownable",description:"Overview",source:"@site/versioned_docs/version-1.0.0/examples/ownable.md",sourceDirName:"examples",slug:"/examples/ownable",permalink:"/1.0.0/examples/ownable",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/versioned_docs/version-1.0.0/examples/ownable.md",tags:[],version:"1.0.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"access-control",permalink:"/1.0.0/examples/access-control"},next:{title:"pausable",permalink:"/1.0.0/examples/pausable"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Steps",id:"steps",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This example shows how you can use the implementation of\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/access/ownable"},"access-control")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp1155"},"psp1155")," together to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"only owner")," rights to mint and burn tokens."),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Include dependencies to ",(0,r.kt)("inlineCode",{parentName:"li"},"psp1155"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ownable")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"brush")," in the cargo file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\npsp1155 = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nownable = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n   "ink_primitives/std",\n   "ink_metadata",\n   "ink_metadata/std",\n   "ink_env/std",\n   "ink_storage/std",\n   "ink_lang/std",\n   "scale/std",\n   "scale-info",\n   "scale-info/std",\n\n   # These dependencies   \n   "psp1155/std",\n   "ownable/std",\n   "brush/std",\n]\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"ink::contract")," macro by ",(0,r.kt)("inlineCode",{parentName:"li"},"brush::contract"),".\nImport ",(0,r.kt)("strong",{parentName:"li"},"everything")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"psp1155::traits")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ownable::traits"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod ownable {\n   use psp1155::traits::*;\n   use ownable::traits::*;\n   use brush::modifiers;\n   use ink_prelude::vec::Vec;\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Declare storage struct and declare the fields related to ",(0,r.kt)("inlineCode",{parentName:"li"},"PSP1155Storage")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"OwnableStorage"),"\ntraits. Then you need to derive ",(0,r.kt)("inlineCode",{parentName:"li"},"PSP1155Storage")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"OwnableStorage")," traits and mark corresponding fields\nwith ",(0,r.kt)("inlineCode",{parentName:"li"},"#[PSP1155StorageField]")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"#[OwnableStorageField]")," attributes. Deriving these traits allows you to reuse the\ndefault implementation of ",(0,r.kt)("inlineCode",{parentName:"li"},"IPSP1155")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ownable"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, PSP1155Storage, OwnableStorage)]\npub struct PSP1155Struct {\n    #[PSP1155StorageField]\n    psp1155: PSP1155Data,\n    #[OwnableStorageField]\n    ownale: OwnableData,\n}\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Inherit implementations of ",(0,r.kt)("inlineCode",{parentName:"li"},"IPSP1155")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ownable")," traits. You can customize (override) methods in this ",(0,r.kt)("inlineCode",{parentName:"li"},"impl")," block.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl Ownable for PSP1155Struct {}\nimpl IPSP1155 for PSP1155Struct {}\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Define constructor and initialize the owner with the contract initiator. Your basic version\nof ",(0,r.kt)("inlineCode",{parentName:"li"},"IPSP1155")," contract is ready!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl PSP1155Struct {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        let mut instance = Self::default();\n        let caller = instance.env().caller();\n        instance._init_with_owner(caller);\n        instance\n    }\n}\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Customize it by adding ownable logic. We will implement ",(0,r.kt)("inlineCode",{parentName:"li"},"IPSP1155Mint")," trait. Modifier ",(0,r.kt)("inlineCode",{parentName:"li"},"only_owner")," will call the function for us which verifies that\ncaller is the owner.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl IPSP1155Mint for PSP1155Struct {\n   #[ink(message)]\n   #[modifiers(only_owner)]\n   fn mint(&mut self, to: AccountId, id: Id, amount: Balance) {\n      self._mint(to, id, amount);\n   }\n\n   #[ink(message)]\n   #[modifiers(only_owner)]\n   fn burn(&mut self, from: AccountId, id: Id, amount: Balance) {\n      self._burn(from, id, amount);\n   }\n}\n")))}d.isMDXComponent=!0}}]);