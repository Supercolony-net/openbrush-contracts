"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[98953],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},56032:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const l={},i=void 0,o={unversionedId:"examples/reentrancy-guard",id:"version-1.0.0/examples/reentrancy-guard",title:"reentrancy-guard",description:"Overview",source:"@site/versioned_docs/version-1.0.0/examples/reentrancy-guard.md",sourceDirName:"examples",slug:"/examples/reentrancy-guard",permalink:"/1.0.0/examples/reentrancy-guard",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/versioned_docs/version-1.0.0/examples/reentrancy-guard.md",tags:[],version:"1.0.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"psp22",permalink:"/1.0.0/examples/psp22"},next:{title:"timelock-controller",permalink:"/1.0.0/examples/timelock-controller"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"MyFlipper",id:"myflipper",level:2},{value:"Steps",id:"steps",level:3},{value:"FlipOnMe",id:"fliponme",level:2},{value:"Steps",id:"steps-1",level:3}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This example shows how you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/security/reentrancy-guard"},"non_reentrant"),"\nmodifier to prevent reentrancy into certain functions. In this example we will create two contracts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"my_flipper_guard")," - this contract is the simple version of ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/paritytech/ink/tree/master/examples/flipper"},"flipper"),",\nbut method ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," will be marked with ",(0,r.kt)("inlineCode",{parentName:"li"},"non_reentrant")," modifier, and we will add additional method, also marked\nwith ",(0,r.kt)("inlineCode",{parentName:"li"},"non_reentrant"),", which will ask another contract to call ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," of our ",(0,r.kt)("inlineCode",{parentName:"li"},"flipper"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flip_on_me")," is a contract which has the only one method ",(0,r.kt)("inlineCode",{parentName:"li"},"flip_on_me"),". This method will try to call ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," on the caller\n(it means that caller must be a contract with method ",(0,r.kt)("inlineCode",{parentName:"li"},"flip"),").")),(0,r.kt)("h2",{id:"myflipper"},"MyFlipper"),(0,r.kt)("h3",{id:"steps"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Include dependencies to ",(0,r.kt)("inlineCode",{parentName:"li"},"reentrancy-guard")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"brush")," in the cargo file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\nreentrancy-guard = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\ncrate-type = [\n    "cdylib",\n    # This contract will be imported by FlipOnMe contract, so we need build this crate also like a `rlib`\n    "rlib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n\n    # These dependencies\n    "brush/std",\n    "reentrancy_guard/std",\n]\n\nink-as-dependency = []\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"To declare the contract, you need to use ",(0,r.kt)("inlineCode",{parentName:"li"},"brush::contract")," macro instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"ink::contract"),". Import ",(0,r.kt)("strong",{parentName:"li"},"everything"),"\nfrom ",(0,r.kt)("inlineCode",{parentName:"li"},"reentrancy-guard")," trait module.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod my_flipper_guard {\n    use reentrancy_guard::traits::*;\n    use brush::modifiers;\n    use ink_env::call::FromAccountId;\n    use crate::flip_on_me::CallerOfFlip;\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Declare storage struct and declare the field for ",(0,r.kt)("inlineCode",{parentName:"li"},"ReentrancyGuardStorage")," trait. Then you need to\nderive ",(0,r.kt)("inlineCode",{parentName:"li"},"ReentrancyGuardStorage")," trait and mark the field with ",(0,r.kt)("inlineCode",{parentName:"li"},"#[ReentrancyGuardStorageField]")," attribute. Deriving\nthis trait allows you to use ",(0,r.kt)("inlineCode",{parentName:"li"},"non_reentrant")," modifier.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, ReentrancyGuardStorage)]\npub struct MyFlipper {\n    #[ReentrancyGuardStorageField]\n    guard: ReentrancyGuardData,\n    value: bool,\n}\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"After that you can add ",(0,r.kt)("inlineCode",{parentName:"li"},"non_reentrant")," modifier to ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"call_flip_on_me")," methods.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl MyFlipper {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        Self::default()\n    }\n\n    #[ink(message)]\n    pub fn get_value(&self) -> bool {\n        self.value\n    }\n\n    #[ink(message)]\n    #[brush::modifiers(non_reentrant)]\n    pub fn flip(&mut self) {\n        self.value = !self.value;\n    }\n\n    #[ink(message)]\n    #[modifiers(non_reentrant)]\n    pub fn call_flip_on_me(&mut self, callee: AccountId) {\n        // This method will do a cross-contract call to callee account. It calls method `flip_on_me`.\n        // Callee contract during execution of `flip_on_me` will call `flip` of this contract.\n        // `call_flip_on_me` and `flip` are marked with `non_reentrant` modifier. It means,\n        // that call of `flip` after `call_flip_on_me` must fail.\n        let mut flipper: CallerOfFlip = FromAccountId::from_account_id(callee);\n        flipper.flip_on_me();\n    }\n}\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"To simplify cross contract call to ",(0,r.kt)("inlineCode",{parentName:"li"},"FlipOnMe")," contract let's create a wrapper around the contract's account id.\nFor that, we will define another contract in this crate with ",(0,r.kt)("inlineCode",{parentName:"li"},"#[ink_lang::contract(compile_as_dependency = true)]"),"\nand empty methods but with the same signature as in the original contract.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// This is a stub implementation of contract with method `flip_on_me`.\n/// We need this implementation to create a wrapper around account id of contract.\n/// With this wrapper, we can easily call methods of some contract.\n/// Example:\n/// ```\n/// let mut flipper: CallerOfFlip = FromAccountId::from_account_id(callee);\n/// flipper.flip_on_me();\n/// ```\n#[ink_lang::contract(compile_as_dependency = true)]\npub mod flip_on_me {\n    #[ink(storage)]\n    pub struct CallerOfFlip {}\n\n    impl CallerOfFlip {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            unimplemented!()\n        }\n    }\n\n    impl CallerOfFlip {\n        #[ink(message)]\n        pub fn flip_on_me(&mut self) {\n            unimplemented!()\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"fliponme"},"FlipOnMe"),(0,r.kt)("p",null,"It's a simple contract that doesn't use any logic from the OpenBrush, so you can use simple ink! here."),(0,r.kt)("h3",{id:"steps-1"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Define ",(0,r.kt)("inlineCode",{parentName:"li"},"FlipOnMe")," contract. It has the only method ",(0,r.kt)("inlineCode",{parentName:"li"},"flip_on_me"),", which will call ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," on caller.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink_lang::contract]\npub mod flip_on_me {\n    use ink_env::call::FromAccountId;\n    use my_flipper_guard::my_flipper_guard::MyFlipper;\n\n    #[ink(storage)]\n    #[derive(Default)]\n    pub struct FlipOnMe {}\n\n    impl FlipOnMe {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn flip_on_me(&mut self) {\n            let caller = self.env().caller();\n            // This method does a cross-contract call to caller contract and calls the `flip` method.\n            let mut flipper: MyFlipper = FromAccountId::from_account_id(caller);\n            flipper.flip();\n        }\n    }\n}\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"To simplify cross-contract call to ",(0,r.kt)("inlineCode",{parentName:"li"},"MyFlipper")," you need to import the contract with ",(0,r.kt)("inlineCode",{parentName:"li"},"ink-as-dependency")," feature.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# This dependencies\nmy_flipper_guard = { path = "../flipper", default - features = false, features = ["ink-as-dependency"] }\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info",\n    "scale-info/std",\n    \n    # This dependencies\n    "my_flipper_guard/std",\n]\n')))}u.isMDXComponent=!0}}]);